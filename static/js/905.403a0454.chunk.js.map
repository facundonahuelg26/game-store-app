{"version":3,"file":"static/js/905.403a0454.chunk.js","mappings":"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","sources":["pages/shipping/UpdateShipping.js","pages/shipping/helpers/index.js","pages/shipping/validations/index.js"],"sourcesContent":["import React from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Wrapper, Container, Errors } from \"../../styled-components\";\r\nimport { shippingSchema } from \"./validations\";\r\nimport { routes } from \"../../router\";\r\nimport { updateServiceById } from \"../../service\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport {\r\n  ButtonForm,\r\n  FieldFormInput,\r\n  LinkTwoForm,\r\n  SelectField,\r\n  TitleAndLinkOne,\r\n} from \"../../components/form\";\r\nimport { useErrorTime } from \"../../hooks/useErrorTime\";\r\nimport { dataAddress, dataPhone } from \"./helpers\";\r\nimport { usePreventSubmit } from \"../../hooks\";\r\n\r\nconst UpdateShippingPage = () => {\r\n  const { userData } = useSelector((state) => state.login);\r\n  const { userId } = userData.data;\r\n  const { shippingData } = useSelector((state) => state.shipping);\r\n  const handleKeyDown = usePreventSubmit()\r\n  const [send, setSend] = React.useState(false);\r\n  const { textError, setTextError } = useErrorTime();\r\n  const [dataState, setDataState] = React.useState([]);\r\n  const [dataCity, setDataCity] = React.useState([]);\r\n\r\n  let { id } = useParams();\r\n  let navigate = useNavigate();\r\n  \r\n  React.useEffect(() => {\r\n    localStorage.setItem(\"shipping\", JSON.stringify(shippingData)); \r\n  }, [shippingData]);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Wrapper marginTop=\"150px\">\r\n          <TitleAndLinkOne\r\n            title=\"Datos de envio\"\r\n            route={routes.home}\r\n            myText={\"Ir al Inicio\"}\r\n            condition={send}\r\n          />\r\n          <Formik\r\n            initialValues={{\r\n              address: shippingData.result.address,\r\n              height: shippingData.result.height,\r\n              state: shippingData.result.state,\r\n              city: shippingData.result.city,\r\n              areacode: shippingData.result.areacode,\r\n              phone: shippingData.result.phone,\r\n            }}\r\n            validationSchema={shippingSchema}\r\n            onSubmit={async (myvalues, { resetForm }) => {\r\n                let myItem = dataState.filter(item => item.id === myvalues.state && item)\r\n                let prov = myItem.length > 0 && myItem.reduce(el => el) \r\n                let mySecondItem = dataCity.filter(item => item.id === myvalues.city && item)\r\n                let ciu = mySecondItem.length > 0 && mySecondItem.reduce(el => el) \r\n\r\n              resetForm();\r\n\r\n              try {\r\n                let value = {\r\n                  address: myvalues.address,\r\n                  height: myvalues.height,\r\n                  state:prov.nombre || shippingData.result.state,\r\n                  city:ciu.nombre || shippingData.result.city,\r\n                  areacode: myvalues.areacode,\r\n                  phone: myvalues.phone,\r\n                  userData: userId,\r\n                };\r\n                const dataReceived = await updateServiceById(\r\n                  value,\r\n                  `user-info/${userId}`\r\n                );\r\n                if (dataReceived.statuscode === 200) {\r\n                  console.log(\"success update\", dataReceived);\r\n                  setSend(true);\r\n                  navigate(routes.account);\r\n                } else {\r\n                  setSend(false);\r\n                  throw dataReceived;\r\n                }\r\n              } catch (err) {\r\n                console.log(err);\r\n                setTextError(err);\r\n              }\r\n            }}\r\n          >\r\n            {({ handleSubmit }) => (\r\n              <Form onSubmit={handleSubmit} onKeyDown={handleKeyDown}>\r\n                {id === \":1\" &&\r\n                  dataAddress.map((item) => (\r\n                    <FieldFormInput\r\n                      key={item.id}\r\n                      item={item}\r\n                      condition={send}\r\n                    />\r\n                  ))}\r\n\r\n                {id === \":2\" && (\r\n                  <SelectField\r\n                    setDataState={setDataState}\r\n                    dataState={dataState}\r\n                    route=\"provincias?campos=id,nombre\"\r\n                    dataCity={dataCity}\r\n                    setDataCity={setDataCity}\r\n                  />\r\n                )}\r\n                {id === \":3\" &&\r\n                  dataPhone.map((item) => (\r\n                    <FieldFormInput\r\n                      key={item.id}\r\n                      item={item}\r\n                      condition={send}\r\n                    />\r\n                  ))}\r\n                <ButtonForm condition={send} myText={\"Siguiente\"} />\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n          <LinkTwoForm\r\n            condition={send}\r\n            myText=\"Volver a mi cuenta\"\r\n            route={routes.account}\r\n          />\r\n        </Wrapper>\r\n        {textError !== \"\" && <Errors>{textError}</Errors>}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateShippingPage;\r\n","export const dataHelper = [\r\n  {\r\n    id:1,\r\n    name: \"address\",\r\n    type: \"text\",\r\n    placeholder: \"Calle\",\r\n  },\r\n  {\r\n    id:2,\r\n    name: \"height\",\r\n    type: \"text\",\r\n    placeholder: \"Altura\",\r\n  },\r\n  {\r\n    id:3,\r\n    name: \"areacode\",\r\n    type: \"text\",\r\n    placeholder: \"Código de Área\",\r\n  },\r\n  {\r\n    id:4,\r\n    name: \"phone\",\r\n    type: \"text\",\r\n    placeholder: \"Télefono\",\r\n  },\r\n];\r\n\r\n\r\nexport const dataAddress = [\r\n  {\r\n    id:1,\r\n    name: \"address\",\r\n    type: \"text\",\r\n    placeholder: \"Calle\",\r\n  },\r\n  {\r\n    id:2,\r\n    name: \"height\",\r\n    type: \"text\",\r\n    placeholder: \"Altura\",\r\n  },\r\n]\r\n\r\nexport const dataPhone = [\r\n  {\r\n    id:3,\r\n    name: \"areacode\",\r\n    type: \"text\",\r\n    placeholder: \"Código de Área\",\r\n  },\r\n  {\r\n    id:4,\r\n    name: \"phone\",\r\n    type: \"text\",\r\n    placeholder: \"Télefono\",\r\n  },\r\n]","import * as Yup from \"yup\";\r\n\r\nexport const shippingSchema = Yup.object().shape({\r\n    address: Yup.string()\r\n      .required(\"La calle es requerida\")\r\n      .min(3, 'La calle debe tener mas de 2 caracteres')\r\n      .max(16, 'La calle debe tener menos de 16 caracteres')\r\n      .matches(/^[a-zA-ZÀ-ÿ\\s]{1,40}$/,' Letras y espacios, puede llevar acentos')\r\n      .trim(),\r\n    height: Yup.string()\r\n      .required(\"La altura es requerida\")\r\n      .matches(/^\\d{4,6}$/,'Entre 4 y 6 números')\r\n      .trim(),\r\n    state: Yup.string()\r\n    .required(\"La provincia es requerida\")\r\n    .trim(),\r\n    city: Yup.string()\r\n    .required(\"La ciudad es requerida\")\r\n    .trim(),\r\n    areacode: Yup.string()\r\n    .required(\"El código de área es requerido\")\r\n    .matches(/^\\d{4,6}$/,'Entre 4 y 6 números')\r\n    .trim(),\r\n    phone: Yup.string()\r\n    .required(\"El teléfono es requerido\")\r\n    .matches(/^\\d{6,14}$/,'Entre 6 y 14 números')\r\n    .trim(),\r\n  });"],"names":["userId","useSelector","state","login","userData","data","shippingData","shipping","handleKeyDown","usePreventSubmit","React","send","setSend","useErrorTime","textError","setTextError","dataState","setDataState","dataCity","setDataCity","id","useParams","navigate","useNavigate","localStorage","setItem","JSON","stringify","marginTop","title","route","routes","myText","condition","initialValues","address","result","height","city","areacode","phone","validationSchema","shippingSchema","onSubmit","myvalues","resetForm","myItem","filter","item","prov","length","reduce","el","mySecondItem","ciu","value","nombre","updateServiceById","dataReceived","statuscode","console","log","handleSubmit","onKeyDown","dataAddress","dataPhone","dataHelper","name","type","placeholder","Yup","shape","required","min","max","matches","trim"],"sourceRoot":""}