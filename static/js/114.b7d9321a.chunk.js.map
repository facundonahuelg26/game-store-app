{"version":3,"file":"static/js/114.b7d9321a.chunk.js","mappings":"mPAEaA,EAAiBC,EAAAA,KAAaC,MAAM,CAC7CC,KAAMF,EAAAA,KACHG,SAAS,0BACTC,IAAI,EAAG,4CACPC,IAAI,GAAI,+CACRC,QAAQ,8BAAwB,4CAChCC,OACHC,SAAUR,EAAAA,KACPG,SAAS,4BACTC,IAAI,EAAG,8CACPC,IAAI,GAAI,iDACRC,QAAQ,8BAAwB,4CAChCC,OACHE,MAAOT,EAAAA,KACJG,SAAS,yCACTM,MAAM,2CACTC,SAAUV,EAAAA,KACPG,SAAS,iCACTC,IAAI,EAAG,mDACPC,IAAI,MACJE,S,8BCtBMI,EAAa,CACxB,CACEC,GAAI,EACJV,KAAM,OACNW,KAAM,OACNC,YAAa,UAEf,CACEF,GAAI,EACJV,KAAM,WACNW,KAAM,OACNC,YAAa,YAEf,CACEF,GAAI,EACJV,KAAM,QACNW,KAAM,QACNC,YAAa,yBAEf,CACEF,GAAI,EACJV,KAAM,WACNW,KAAM,WACNC,YAAa,kB,iDCoDjB,EA9DqB,WACnB,MAAwBC,EAAAA,SAAe,MAAvC,eAAOC,EAAP,KAAaC,EAAb,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAkCC,EAAAA,EAAAA,KAA3BC,EAAP,EAAOA,UAAWC,EAAlB,EAAkBA,aACZC,GAAgBC,EAAAA,EAAAA,MAEtB,OACE,+BACE,UAAC,KAAD,YACE,UAAC,KAAD,CAASC,UAAU,QAAnB,WACE,SAAC,KAAD,CAAiBC,UAAWV,EAAMW,MAAOC,EAAAA,EAAAA,KACzCC,MAAM,cAAcC,OAAO,kBAC3B,SAAC,KAAD,CACEC,cAAe,CACb7B,KAAM,GACNM,SAAU,GACVC,MAAO,GACPC,SAAU,IAEZsB,iBAAkBjC,EAClBkC,SAAQ,mCAAE,WAAOC,EAAP,mFAAmBC,EAAnB,EAAmBA,aAAnB,SAGFC,EAAQ,CACVlC,KAAKgC,EAAShC,KACdM,SAAS0B,EAAS1B,SAClBC,MAAMyB,EAASzB,MACfC,SAASwB,EAASxB,UAPd,UASqB2B,EAAAA,EAAAA,IAAcD,EAAO,eAT1C,UAU0B,OAD1BE,EATA,QAUWC,WAVX,iBAWJC,QAAQC,IAAI,mBAAoBH,GAChCrB,EAAQqB,GAZJ,8BAcJrB,EAAQ,MACFqB,EAfF,0DAkBNE,QAAQC,IAAR,MACAnB,EAAa,KAAIoB,SAnBX,0DAAF,wDARV,SA+BG,gBAAGC,EAAH,EAAGA,aAAH,OACC,UAAC,KAAD,CAAMV,SAAUU,EAAcC,UAAWrB,EAAzC,UACGZ,EAAWkC,KAAI,SAAAC,GAAI,OAClB,SAACC,EAAA,EAAD,CAA8BD,KAAMA,EAAMpB,UAAWV,GAAhC8B,EAAKlC,QAE5B,SAAC,KAAD,CAAYkB,OAAO,YAAYJ,UAAWV,WAIhD,SAAC,KAAD,CAAaW,MAAOC,EAAAA,EAAAA,MAAcoB,QAAS,CAACC,KAAK/B,GAAWY,OAAO,oBACnEJ,UAAWV,OAED,OAATA,IAAiB,SAAC,KAAD,CAAUkC,GAAItB,EAAAA,EAAAA,MAAcuB,MAAO,CAACF,KAAK/B,KAC9C,KAAdG,IAAoB,SAAC,KAAD,UAASA","sources":["pages/register/validations/index.js","pages/register/helpers/index.js","pages/register/Register.js"],"sourcesContent":["import * as Yup from \"yup\";\r\n\r\nexport const registerSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n      .required(\"El nombre es requerido\")\r\n      .min(3, 'El nombre debe tener mas de 2 caracteres')\r\n      .max(16, 'El nombre debe tener menos de 16 caracteres')\r\n      .matches(/^[a-zA-ZÀ-ÿ\\s]{1,40}$/,' Letras y espacios, puede llevar acentos')\r\n      .trim(),\r\n    lastname: Yup.string()\r\n      .required(\"El apellido es requerido\")\r\n      .min(3, 'El apellido debe tener mas de 2 caracteres')\r\n      .max(16, 'La apellido debe tener menos de 16 caracteres')\r\n      .matches(/^[a-zA-ZÀ-ÿ\\s]{1,40}$/,' Letras y espacios, puede llevar acentos')\r\n      .trim(),\r\n    email: Yup.string()\r\n      .required(\"El correo electrónico es requerido\")\r\n      .email(\"Escribe un correo electrónico valido\"),\r\n    password: Yup.string()\r\n      .required(\"La contraseña es requerida\")\r\n      .min(5, 'La contraseña debe tener mas de 4 caracteres')\r\n      .max(1024)\r\n      .trim(),\r\n  });","export const dataHelper = [\r\n  {\r\n    id: 1,\r\n    name: \"name\",\r\n    type: \"text\",\r\n    placeholder: \"Nombre\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"lastname\",\r\n    type: \"text\",\r\n    placeholder: \"Apellido\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"email\",\r\n    type: \"email\",\r\n    placeholder: \"Correo Electrónico\",\r\n  },\r\n  {\r\n    id: 4,\r\n    name: \"password\",\r\n    type: \"password\",\r\n    placeholder: \"Contraseña\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport {Wrapper,Container,Errors} from \"../../styled-components\";\r\nimport { registerSchema } from \"./validations\";\r\nimport { routes } from \"../../router/helpers/helperRoutes\";\r\nimport { createService } from \"../../service\";\r\nimport { Navigate, useLocation} from \"react-router-dom\";\r\nimport { dataHelper } from \"./helpers\";\r\nimport { FieldFormInput } from \"../../components/form/FieldFormInput\";\r\nimport { usePreventSubmit } from \"../../hooks\";\r\nimport { useErrorTime } from \"../../hooks/useErrorTime\";\r\nimport { ButtonForm, LinkTwoForm, TitleAndLinkOne } from \"../../components/form\";\r\n\r\nconst RegisterPage = () => {\r\n  const [user, setUser] = React.useState(null)\r\n  const location = useLocation()\r\n  const {textError, setTextError} = useErrorTime();\r\n  const handleKeyDown = usePreventSubmit()\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Wrapper marginTop='100px'>\r\n          <TitleAndLinkOne condition={user} route={routes.home} \r\n          title='Registrarse' myText='Ir al Inicio' />\r\n          <Formik\r\n            initialValues={{\r\n              name: \"\",\r\n              lastname: \"\",\r\n              email: \"\",\r\n              password: \"\",\r\n            }}\r\n            validationSchema={registerSchema}\r\n            onSubmit={async (myvalues, { resetForm }) => {\r\n              resetForm();\r\n              try {\r\n                let value = {\r\n                  name:myvalues.name,\r\n                  lastname:myvalues.lastname,\r\n                  email:myvalues.email,\r\n                  password:myvalues.password \r\n                }\r\n                const userReceived = await createService(value, 'auth/signup');\r\n                if (userReceived.statuscode === 201) {\r\n                  console.log(\"success register\", userReceived);\r\n                  setUser(userReceived)\r\n                }else {  \r\n                  setUser(null)\r\n                  throw userReceived;\r\n                }\r\n              } catch (err) {\r\n                console.log(err);\r\n                setTextError(err.message)\r\n              }\r\n            }}\r\n          >\r\n            {({ handleSubmit }) => (\r\n              <Form onSubmit={handleSubmit} onKeyDown={handleKeyDown}>\r\n                {dataHelper.map(item => (\r\n                  <FieldFormInput key={item.id} item={item} condition={user} />\r\n                ))}\r\n                <ButtonForm myText='Siguiente' condition={user} />\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n          <LinkTwoForm route={routes.login} myState={{from:location}} myText='Iniciar Sesión' \r\n          condition={user} />\r\n        </Wrapper>\r\n          {user !== null && <Navigate to={routes.login} state={{from:location}}/>}        \r\n        {textError !== '' && <Errors>{textError}</Errors>}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterPage;\r\n"],"names":["registerSchema","Yup","shape","name","required","min","max","matches","trim","lastname","email","password","dataHelper","id","type","placeholder","React","user","setUser","location","useLocation","useErrorTime","textError","setTextError","handleKeyDown","usePreventSubmit","marginTop","condition","route","routes","title","myText","initialValues","validationSchema","onSubmit","myvalues","resetForm","value","createService","userReceived","statuscode","console","log","message","handleSubmit","onKeyDown","map","item","FieldFormInput","myState","from","to","state"],"sourceRoot":""}